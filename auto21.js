if (typeof $request !== 'undefined' && $request) {
    let url = $request.url;
    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/;
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null;

    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        $persistentStore.write(key, 'key');
        $notification.post('Thu th·∫≠p th√¥ng tin th√†nh c√¥ng üéâ', '', 'Vui l√≤ng ch·ªânh s·ª≠a c√°c tham s·ªë ƒë·ªÉ t·∫Øt t·∫≠p l·ªánh sau khi l·∫•y APP_ID');
        console.log(`Thu th·∫≠p th√¥ng tin th√†nh c√¥ng: key=${key}`);
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/);
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1];
            let existingAppIds = $persistentStore.read('APP_ID');
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : []);
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId);
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID');
                $notification.post('T√¨m th·∫•y APP_ID', '', `ƒê√£ l∆∞u APP_ID: ${appId}`);
                console.log(`ƒê√£ l∆∞u APP_ID: ${appId}`);
            } else {
                $notification.post('APP_ID L·∫∑p l·∫°i', '', `APP_ID: ${appId} ƒë√£ t·ªìn t·∫°iÔºåKh√¥ng c·∫ßn th√™m l·∫°i.`);
                console.log(`APP_ID: ${appId} ƒë√£ t·ªìn t·∫°iÔºåKh√¥ng c·∫ßn th√™m l·∫°i.`);
            }
        } else {
            console.log('TestFlight kh√¥ng h·ª£p l·ªá, kh√¥ng c√≥ APP_ID');
        }
    }

    $done({});
} else {
    let appIds = $persistentStore.read('APP_ID');
    if (!appIds) {
        console.log('Kh√¥ng t√¨m th·∫•y APP_ID');
        $done();
    } else {
        appIds = appIds.split(',');
        appIds.forEach(appId => {
            checkBetaSlot(appId);
        });
        $done();
    }
}

function checkBetaSlot(appId) {
    let key = $persistentStore.read('key');
    if (!key) {
        console.log('Kh√¥ng t√¨m th·∫•y key');
        $notification.post('L·ªói', '', `Kh√¥ng t√¨m th·∫•y key ƒë·ªÉ th·ª±c hi·ªán y√™u c·∫ßu cho APP ID: ${appId}`);
        return;
    }

    let testUrl = `https://testflight.apple.com/v3/accounts/${key}/ru/${appId}`;

    $httpClient.get(testUrl, (error, response, data) => {
        if (error) {
            console.log(`${appId} M·∫•t k·∫øt n·ªëi: ${error}`);
            $notification.post('M·∫•t k·∫øt n·ªëi', '', `Kh√¥ng th·ªÉ k·∫øt n·ªëi m√°y ch·ªß cho APP ID: ${appId}`);
            return;
        }

        if (response.status !== 200) {
            console.log(`${appId} Li√™n k·∫øt kh√¥ng h·ª£p l·ªá: M√£ l·ªói ${response.status}`);
            $notification.post('Li√™n k·∫øt kh√¥ng h·ª£p l·ªá', '', `${appId} Kh√¥ng b·ªã x√≥a`);
            return;
        }

        let jsonData;
        try {
            jsonData = JSON.parse(data);
        } catch (parseError) {
            console.log(`${appId} Ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng: ${parseError}`);
            return;
        }

        if (!jsonData || !jsonData.data) {
            console.log(`${appId} Kh√¥ng nh·∫≠n ng∆∞·ªùi m·ªõi`);
            return;
        }

        if (jsonData.data.status === 'FULL') {
            console.log(`${appId} B·∫£n beta ƒë·∫ßy`);
        } else {
            console.log(`${appId} C√≤n tr·ªëng slot beta`);
            $notification.post('C√≤n tr·ªëng slot beta', '', `APP ID: ${appId} c√≤n slot tr·ªëng.`);
        }
    });
}