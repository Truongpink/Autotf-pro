/*
Th·ªùi gian c·∫≠p nh·∫≠t: 2024.05.11 10:40
N·ªôi dung ƒë∆∞·ª£c c·∫≠p nh·∫≠t: ƒê√£ th√™m t√≠nh nƒÉng l∆∞u gi·ªØ ho·∫∑c bi·∫øn m·∫•t ch·∫≠m theo danh m·ª•c th√¥ng b√°o, √¢m thanh nh·∫Øc ƒë√≥ng m√¥-ƒëun (tham s·ªë SurgeTF)

Surge5
https://raw.githubusercontent.com/Hely-T/TestFlight-All/master/Tool/Surge5/Surge/AUTOTF.sgmodule
BoxJS
https://raw.githubusercontent.com/Hely-T/TestFlight-All/master/Tool/Surge5/boxjs.json
*/

if (typeof $request !== 'undefined' && $request) {
    let url = $request.url

    let keyPattern = /^https:\/\/testflight\.apple\.com\/v3\/accounts\/(.*?)\/apps/
    let key = url.match(keyPattern) ? url.match(keyPattern)[1] : null
    const handler = (appIdMatch) => {
        if (appIdMatch && appIdMatch[1]) {
            let appId = appIdMatch[1]
            let existingAppIds = $persistentStore.read('APP_ID')
            let appIdSet = new Set(existingAppIds ? existingAppIds.split(',') : [])
            if (!appIdSet.has(appId)) {
                appIdSet.add(appId)
                $persistentStore.write(Array.from(appIdSet).join(','), 'APP_ID')
                $notification.post('APP_ID ƒë√£ kh√¥ng c√≤n', '', `APP_ID ƒë√£ ƒë∆∞·ª£c ch·ª•p v√† l∆∞u tr·ªØ: ${appId}`, {"auto-dismiss": 2})
                console.log(`APP_ID ƒë√£ ƒë∆∞·ª£c ch·ª•p v√† l∆∞u tr·ªØ: ${appId}`)
            } else {
                $notification.post('APP_ID b·ªã tr√πng l·∫∑p', '', `APP_ID: ${appId} N√≥ ƒë√£ t·ªìn t·∫°i r·ªìi, kh√¥ng c·∫ßn th√™m l·∫°i.` , {"auto-dismiss": 2})
                console.log(`APP_ID: ${appId} N√≥ ƒë√£ t·ªìn t·∫°i r·ªìi, kh√¥ng c·∫ßn th√™m l·∫°i.`)
            }
        } else {
            console.log('Kh√¥ng c√≥ APP_ID TestFlight h·ª£p l·ªá n√†o ƒë∆∞·ª£c ghi l·∫°i')
        }
    }
    if (/^https:\/\/testflight\.apple\.com\/v3\/accounts\/.*\/apps$/.test(url) && key) {
        let headers = Object.fromEntries(Object.entries($request.headers).map(([key, value]) => [key.toLowerCase(), value]))
        let session_id = headers['x-session-id']
        let session_digest = headers['x-session-digest']
        let request_id = headers['x-request-id']

        $persistentStore.write(session_id, 'session_id')
        $persistentStore.write(session_digest, 'session_digest')
        $persistentStore.write(request_id, 'request_id')
        $persistentStore.write(key, 'key')

        let existingAppIds = $persistentStore.read('APP_ID')
        if (!existingAppIds) {
            $notification.post('Th√¥ng tin thu ƒë∆∞·ª£c th√†nh c√¥ng üéâ', '', 'Vui l√≤ng l·∫•y APP_ID v√† ch·ªânh s·ª≠a c√°c tham s·ªë m√¥-ƒëun ƒë·ªÉ t·∫Øt t·∫≠p l·ªánh.' , {"auto-dismiss": 10})
        }
        console.log(`Th√¥ng tin thu ƒë∆∞·ª£c th√†nh c√¥ng: session_id=${session_id}, session_digest=${session_digest}, request_id=${request_id}, key=${key}`)
    } else if (/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/.test(url)) {
        const appIdMatch = url.match(/^https:\/\/testflight\.apple\.com\/join\/([A-Za-z0-9]+)$/)
        handler(appIdMatch)
    } else if (/v3\/accounts\/.*\/ru/.test(url)) {
        const appIdMatch = url.match(/v3\/accounts\/.*\/ru\/(.*)/)
        handler(appIdMatch)
    }

    $done({})
} else {
    !(async () => {
        let ids = $persistentStore.read('APP_ID')
        if (!ids) {
            console.log('APP_ID kh√¥ng ƒë∆∞·ª£c ph√°t hi·ªán')
            $done()
        } else {
            ids = ids.split(',')
            for await (const ID of ids) {
                await autoPost(ID, ids)
            }
            if (ids.length === 0) {
                $notification.post('T·∫•t c·∫£ c√°c ID TestFlight ƒë√£ ƒë∆∞·ª£c th√™m v√†o üéâ', '', 'M√¥-ƒëun ƒë√£ t·ª± ƒë·ªông t·∫Øt v√† ng·ª´ng ch·∫°y.', {"sound": true});
                $done($httpAPI('POST', '/v1/modules', {'Gi√°m s√°t beta c√¥ng khai': false}));
            } else {
                $done()
            }
        }
    })()
}

async function autoPost(ID, ids) {
    let Key = $persistentStore.read('key')
    let testurl = `https://testflight.apple.com/v3/accounts/${Key}/join/${appId}`;
    let header = {
        'X-Session-Id': $persistentStore.read('session_id'),
        'X-Session-Digest': $persistentStore.read('session_digest'),
        'X-Request-Id': $persistentStore.read('request_id')
    }

    return new Promise((resolve) => {
        $httpClient.get({ url: testurl + ID, headers: header }, (error, response, data) => {
            if (error) {
                console.log(`${ID} Y√™u c·∫ßu m·∫°ng kh√¥ng th√†nh c√¥ng: ${error}ÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return;
            }

            if (response.status === 500) {
                console.log(`${ID} L·ªói m√°y ch·ªß, m√£ tr·∫°ng th√°i 500ÔºåL∆∞u tr·ªØ APP_ID`);
                resolve();
                return
            }

            if (response.status !== 200) {
                console.log(`${ID} Kh√¥ng ph·∫£i l√† m·ªôt li√™n k·∫øt h·ª£p l·ªá: m√£ tr·∫°ng th√°i ${response.status}ÔºåDi d·ªùi APP_ID`)
                ids.splice(ids.indexOf(ID), 1)
                $persistentStore.write(ids.join(','), 'APP_ID')
                $notification.post('Kh√¥ng ph·∫£i l√† li√™n k·∫øt TestFlight h·ª£p l·ªá', '', `${ID} ƒë√£ b·ªã lo·∫°i b·ªè` , {"auto-dismiss": 2})
                resolve()
                return
            }

            let jsonData
            try {
                jsonData = JSON.parse(data)
            } catch (parseError) {
                console.log(`${ID} Ph√¢n t√≠ch ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng: ${parseError}ÔºåL∆∞u tr·ªØ APP_ID`)
                resolve()
                return
            }

            if (!jsonData || !jsonData.data) {
                console.log(`${ID} Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n l·ªùi m·ªùiÔºåL∆∞u tr·ªØ APP_ID`)
                resolve()
                return
            }

            if (jsonData.data.status === 'FULL') {
                console.log(`${ID} ·ª®ng ƒë·ª•ng ƒë√£ ƒë·∫ßyÔºåL∆∞u tr·ªØ APP_ID`)
                resolve()
                return
            }

            $httpClient.post({ url: testurl + ID + '/accept', headers: header }, (error, response, body) => {
                if (!error && response.status === 200) {
                    let jsonBody
                    try {
                        jsonBody = JSON.parse(body)
                    } catch (parseError) {
                        console.log(`${ID} Y√™u c·∫ßu tham gia ƒë√£ ƒë·∫ßy, ph√¢n t√≠ch ph·∫£n h·ªìi kh√¥ng th√†nh c√¥ng: ${parseError}ÔºåL∆∞u tr·ªØ APP_ID`)
                        resolve()
                        return
                    }

                    console.log(`${jsonBody.data.name} TestFlightƒê√£ tham gia th√†nh c√¥ng`)
                    ids.splice(ids.indexOf(ID), 1)
                    $persistentStore.write(ids.join(','), 'APP_ID')
                    if (ids.length > 0) {
                        $notification.post(jsonBody.data.name + ' TestFlight ƒê√£ tham gia th√†nh c√¥ng', '', `Ti·∫øp t·ª•c th·ª±c hi·ªán APP IDÔºö${ids.join(',')}`, {"sound": true})
                    } else {
                        $notification.post(jsonBody.data.name + ' TestFlight ƒê√£ tham gia th√†nh c√¥ng', '', 'T·∫•t c·∫£ ID ·ª©ng d·ª•ng ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω', {"sound": true})
                    }
                } else {
                    console.log(`${ID} Kh√¥ng th·ªÉ tham gia: ${error || `m√£ tr·∫°ng th√°i ${response.status}`}ÔºåL∆∞u tr·ªØ APP_ID`)
                }
                resolve()
            })
        })
    })
}